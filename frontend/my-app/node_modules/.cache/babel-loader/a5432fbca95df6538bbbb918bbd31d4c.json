{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cody\\\\Coding\\\\RealCalc\\\\RoofCalc\\\\frontend\\\\my-app\\\\src\\\\components\\\\RehabCosts.js\";\nimport React, { useState, useEffect } from 'react';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { InputAdornment, TextField, ExpansionPanel, Typography, ExpansionPanelDetails, ExpansionPanelSummary, FormControl } from '@material-ui/core';\n\nconst RehabCosts = props => {\n  const [values, setValues] = useState({\n    rehabCosts: 0,\n    monthlyPayment: 0\n  });\n\n  const handleChange = event => {\n    const re = /^[.,0-9\\b]+$/; // if value is not blank, then test the regex and only accept numbers\n\n    if (event.target.value === '' || re.test(event.target.value)) {\n      setValues({ ...values,\n        [event.target.name]: formatter.format(event.target.value.toString().replace(/,/g, '')).replace('$', '')\n      });\n    }\n  };\n\n  useEffect(() => {\n    setValues(values => ({ ...values,\n      monthlyPayment: formatter.format(rehabCosts.toString().replace(/,/g, '')).replace('$', '')\n    }));\n  }, [values.rehabCosts]);\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0\n  });\n  return /*#__PURE__*/React.createElement(ExpansionPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ExpansionPanelSummary, {\n    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, {\n      className: \"expand-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }\n    }),\n    \"aria-controls\": \"panel1a-content\",\n    id: \"panel1a-header\",\n    className: \"accordion-summary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Property Taxes\"), /*#__PURE__*/React.createElement(Typography, {\n    className: \"accordion-total expenses\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, values.monthlyPayment, \"/Mo\")), /*#__PURE__*/React.createElement(ExpansionPanelDetails, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Estimated Rehab Costs\",\n    variant: \"filled\",\n    name: \"rehabCosts\",\n    value: values.rehabCosts,\n    fullWidth: true,\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 23\n        }\n      }, \"$\"))\n    },\n    onChange: (event, value) => handleChange(event, value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default RehabCosts;","map":{"version":3,"sources":["C:/Users/Cody/Coding/RealCalc/RoofCalc/frontend/my-app/src/components/RehabCosts.js"],"names":["React","useState","useEffect","ExpandMoreIcon","InputAdornment","TextField","ExpansionPanel","Typography","ExpansionPanelDetails","ExpansionPanelSummary","FormControl","RehabCosts","props","values","setValues","rehabCosts","monthlyPayment","handleChange","event","re","target","value","test","name","formatter","format","toString","replace","Intl","NumberFormat","style","currency","minimumFractionDigits","startAdornment"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport {InputAdornment, TextField, ExpansionPanel, Typography, ExpansionPanelDetails, ExpansionPanelSummary, FormControl} from '@material-ui/core'\r\n\r\nconst RehabCosts = (props) => {\r\n  const [values, setValues] = useState({\r\n      rehabCosts: 0,\r\n      monthlyPayment: 0\r\n    })\r\n\r\n    const handleChange = (event) => {\r\n      const re = /^[.,0-9\\b]+$/;\r\n      // if value is not blank, then test the regex and only accept numbers\r\n      if (event.target.value === '' || re.test(event.target.value)) {\r\n        setValues({ ...values, [event.target.name]: formatter.format(event.target.value.toString().replace(/,/g, '')).replace('$', '')})\r\n      }\r\n    }\r\n\r\n    useEffect(() => {\r\n      setValues((values) => ({ ...values, monthlyPayment: formatter.format(rehabCosts.toString().replace(/,/g, '')).replace('$', '')}))\r\n    }, [values.rehabCosts])\r\n\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: 0\r\n  })\r\n\r\n  return (\r\n    <ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n      expandIcon={<ExpandMoreIcon className='expand-icon'/>}\r\n      aria-controls='panel1a-content'\r\n      id='panel1a-header'\r\n      className='accordion-summary'\r\n      >\r\n        <Typography>Property Taxes</Typography>\r\n        <Typography className='accordion-total expenses'>{values.monthlyPayment}/Mo</Typography>\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n        <FormControl fullWidth>\r\n          <TextField\r\n              label='Estimated Rehab Costs'\r\n              variant='filled'\r\n              name='rehabCosts'\r\n              value={values.rehabCosts}\r\n              fullWidth={true}\r\n              InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <p>$</p>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              onChange={(event, value)=> handleChange(event, value)}\r\n          />\r\n        </FormControl>\r\n      </ExpansionPanelDetails>\r\n    </ExpansionPanel>\r\n  )\r\n}\r\n\r\nexport default RehabCosts\r\n"]},"metadata":{},"sourceType":"module"}